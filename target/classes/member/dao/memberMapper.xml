<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberSQL">
	<!-- 로그인 -->
	<select id="login" parameterType="java.util.Map" resultType="member">
		select * from member where id=#{id} and pwd=#{pwd}
	</select>
	<!-- 중복 아이디 체크 -->
	<select id="checkId" parameterType="String" resultType="member">
		select * from member where id=#{id}
	</select>
		
	<!-- 회원가입 -->
	<insert id="write" parameterType="member">
		insert into member(SEQ,NAME,ID,PWD,EMAIL1,EMAIL2,TEL1,TEL2,TEL3,REGISTERDATE) 
				values(member_seq.nextval,#{name},#{id},#{pwd},#{email1},#{email2},#{tel1},#{tel2},#{tel3},SYSDATE)		
	</insert>
	
	 <!-- 회원 정보수정 -->
	<update id="modify" parameterType="member">
		update member set name=#{name}
						 ,email1=#{email1}
						 ,email2=#{email2}
						 ,tel1=#{tel1}
						 ,tel2=#{tel2}
						 ,tel3=#{tel3}
						 ,zipcode=#{zipcode}
						 ,addr1=#{addr1}
						 ,addr2=#{addr2}
						 where id=#{id}
	</update>	
		
	<!-- 자동로그인 설정/연장 -->
	<update id="keepLogin" parameterType="java.util.Map">
	update member set SESSIONID = #{sessionid}, SESSIONLIMIT = #{sessionlimit} 
	where id = #{id}
	</update>
	
	<!-- 자동로그인 값 가져오기-->
	<select id="checkLoginBefore" parameterType="String" resultType="member">
	select * from member where SESSIONID = #{value}
	</select>	

	<!-- 유저요청을 통한 계정 정지 : 3번 상태인 유저는 로그인 불가 -->
	<update id="deleteMember" parameterType="String">
		update member set state=3 where id=#{id}
	</update>
	
	<!-- 주문 번호 로그인 -->
	<select id="orderCheck" parameterType="java.util.Map" resultType="member">
		select * from member where orderid=#{orderId} and orderpwd=#{orderPwd}
	</select>	

	<!-- 아이디 찾기 검색 -->
	<select id="findLostId" parameterType="java.util.Map" resultType="member">
		select * from member where name=#{findName} and email1=#{findIdemail1} and email2=#{findIdemail2}
	</select>
	
	<!-- 새 비밀번호 설정 -->
	<update id="setNewPwd" parameterType="member">
	 update member set pwd=#{pwd} where id=#{id}
	</update>	
			
	<!-- 회원 정보 호출 -->
	<select id="getMember" parameterType="String" resultType="member">
		select * from member where id=#{id}
	</select>
		
	<!-- 회원 전체 정보 호출 -->
	<select id="getMemberList" resultType="member">
		select * from member
	</select>
	
	<!-- 회원 포인트 지급 -->
	<update id="setPoint" parameterType="java.util.Map">
		update MEMBER set point=point+#{pointQty} where id=#{id}
	</update>

	<!-- 회원 포인트 차감 -->
	<update id="reducePoint" parameterType="java.util.Map">
		update MEMBER set point=point-#{pointQty} where id=#{id}
	</update>
		
	<!-- 회원 정보 최종 삭제 -->
	<delete id="deleteUserInfo" parameterType="String">
	begin
		delete MEMBER where id=#{id};
		delete MEMBER_DELETE where id=#{id};
	end;
	</delete>
	
	<!-- 회원 정보 복구 -->
	<update id="makeUserRestored" parameterType="String">
		update MEMBER set state=1 where id=#{id}
	</update>
	
	<!-- QAMESSAGE 회원 1 대 1 문의 사항 저장 -->
	<insert id="memberQASend" parameterType="message">
		insert into QAMESSAGE values(message_seq.nextval,#{sender},#{sendAddr},#{subject},#{content},SYSDATE)
	</insert>	

	<!-- MEMBER_DELETE 탈퇴 요청한 회원 정보 저장 -->
	<insert id="deleteMemberAdmin" parameterType="java.util.Map">
		insert into MEMBER_DELETE values(#{id},#{email},#{dReason},#{etcDetail},SYSDATE)
	</insert>	
	
	<!-- MEMBER_DELETE 탈퇴 사유 불러오기 -->
	<select id="getDeleteRequest" parameterType="String" resultType="member">
		select * from MEMBER_DELETE where id=#{id}
	</select>
	<!-- MEMBER_DELETE 회원 복구로 인한 탈퇴 사유 삭제 -->
	<delete id="deleteRequest" parameterType="String">
		delete MEMBER_DELETE where id=#{id}
	</delete>
</mapper>












